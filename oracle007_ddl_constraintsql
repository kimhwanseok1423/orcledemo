/*테이블 구조 정의
CREATE TABLE table_name(
column_name datatype,
column_name datatype
);

자료형(datatype)
varchar2-가변길이 문자를 저장
char-고정길이 문자를 지정
number(m)-정수 저장
number(m,n)-실수 저장
date- 날짜 저장
datetime - 날짜 변경 시간 저장
*/

CREATE TABLE student(
name varchar2(20), -- 바이트(영문 ,특수문자 1바이트 한글-3바이트)
age number(3), --자릿수
avg number(5,2), --5는 전체자릿수 ,2는 소수점 자릿수
hire date
);
select * from student;

--정상 삽입select * from student;

select * from student;
--ORA-12899: value too large for column "HR"."STUDENT"."NAME" (actual: 26, maximum: 20)
Insert into student(name,age,avg,hire)
values('박차고 나온 세상에',30,97.85,sysdate);
--3000: 크기초과 (3자리까지만 가능 -0~999)
INSERT INTO student(name,age,avg,hire)
values('홍길동',3000,97.85,sysdate);
--2997.85: 크기초과(5자리까지만 가능)-소수점은 포함하지 않는다.
INSERT INTO student(name,age,avg,hire)
values('홍길동',30,2997.85,sysdate);
--207.8589: 소수점 이하는 반올림 해서 삽입함
INSERT INTO student(name,age,avg,hire)
values('홍길동',30,297.8589,sysdate);

select*from student;

--소수점2자리로 무조건 계산한다 즉 정수는 3자리까지만 허용한다.
INSERT INTO student(name,age,avg,hire)
values('홍길동',30,5297.8,sysdate);


/*
ALTER
객채(table)의 구조를 변경해주는 명령어다

-생성: CREATE TABLE.CREATE SEQIEMCE ,CREATE VIEW ,CREATE INDEX
--수줭: ALTER TABLE,ALTER SEQUENCE,ALTER VIEW ALTER INDEX

*/

테이블에 컬럼을 추가한다.
ALTER TABLE student
ADD loc varchar2(50);

/*
describe                              descending
DESC table_name 테이블 구조확인, dESC column_name:내림차순

*/
DESC student;
SELECT* FROM student;
-- 데이터 삽입되어 있는 상태에서 v
alter table student
modify name varchar2(5);

--저장된 데이터의 크기로 줄일 수 있다.
alter table student
modify name varchar2(9);

--크기를 늘리는 것은 상관ㅇ벗다.
ALTER TABLE student
MODIFY name varchar2(30);

DESc student;

--테이블의 컬럼명을 수정한다.
ALTER TABLE student
RENAME column avg to  jumsu;

desc student;

--테이블명을 변경한다.
ALTER TABLE student
RENAME to members;

DESC student;

--정상수행
DESC members;

/*
DELETE : 테이블에 저장된 데이터 모두를 삭제한다. (AUTO COMMIT이 안됨) 롤백하면 돌아감
Truncate:테이블에 저장된 데이터 모두를 삭제한다.  (AUTO COMMIT이 됨)롤백해도 안돌아가짐
DROP: 테이블 자체를 삭제하낟.(AUTO COMMIT이 됨)
*/

COMMIT;
SELECT *FROM MEMBERS;

delete  from  members;
SELECT *FROM MEMBERS;
ROLLBACK;

SELECT *FROM MEMBERS;

Truncate table members;
SELECT *FROM MEMBERS;

ROllback;

SELECT *FROM MEMBERS;

DROP TABLE members;

SELECT *FROM MEMBERS;

rollback;

SELECT *FROM MEMBERS;

/*
무결성 제약조건
무결성이 데이터베이스 내에 있는 데이터의 정확성 지기를 의미하려면
제약조건은 바람직하지 않는 데이터가 저자오디는 것을 방지하는 것을 말한다.

무결성 제약조건 5종류 not null, unique,primary key ,foreign key,check
not null: null 허용x
unique : 중복된 값을 허용하지 않는다. 항상 유일한 값디ㅏ
foreign key: 참조되는 테이블의 컬럼의 값이 존재하면 허용된다.
check: 저장 가능한 데이터의 값의 범위나 조건을 지정하여 설정한 값만을 허용한다.

무결정 제약조건 2가지 레벨: 컬럼레벨 ,테이블 레벨

컬럼레벨 설정
CREATE TABLE emp06(
id varchar2(10) constraint  emp06_id_pk primary key
name varchar2(20) constraint emp06_name_nn not null,
age number(3) constraint emp06_age_ck check(age between 20 and 50),
gen char(1) constraint emp06_gen_ck check(gen in('m','w'))
);
테이블 레벨 설정
CREATE TABLE emp07(
id varchar2(10),
name varchar2(20) constraint emp06_name_nn not null,
age number(3),
gen char(1),
constraint  emp07_id_pk primary key(id)
 constraint emp07_age_ck check(age between 20 and 50),
 constraint emp07_gen_ck check(gen in('m','w'))
);
*/

select * from user_constraints;
CREATE TABLE emp06(
id varchar2(10) constraint  emp06_id_pk primary key,
name varchar2(20) constraint emp06_name_nn not null,
age number(3) constraint emp06_age_ck check(age between 20 and 50),
gen char(2) constraint emp06_gen_ck check(gen in(' 남','여'))
);

select *from user_constraints
WHERE constraint_name LIKE '%EMP06%';

INSERT INTO emp06(id,name,age,gen)
VALUES('kim','김고수',15,'남');

drop table emp06;

select *from user_constraints
WHERE constraint_name LIKE '%EMP06%';

select * from user_constraints;

CREATE TABLE emp06(
id varchar2(10) constraint  emp06_id_pk primary key,
name varchar2(20) constraint emp06_name_nn not null,
age number(3) constraint emp06_age_ck check(age between 20 and 50),
gen char(1) constraint emp06_gen_ck check(gen in('m','w'))
);

select *from user_constraints
WHERE constraint_name LIKE '%EMP06%';
--ORA-02290: check constraint (HR.EMP06_AGE_CK) violated
INSERT INTO emp06(id,name,age,gen)
VALUES('kim','김고수',15,'m');

--ORA-02290: check constraint (HR.EMP06_GEN_CK) violated
INSERT INTO emp06(id,name,age,gen)
VALUES('kim','김고수',25,'p');

INSERT INTO emp06(id,name,age,gen)
VALUES('kim','김고수',25,'m');
--ORA-00001: unique constraint (HR.EMP06_ID_PK) violated
INSERT INTO emp06(id,name,age,gen)
VALUES('kim','김고수',25,'m');
--ORA-01400: cannot insert NULL into ("HR"."EMP06"."ID")
INSERT INTO emp06(id,name,age,gen)
VALUES(null,'김고수',25,'m');

--primary key와 foreign key

CREATE TABLE dept01(
deptno number(2) constraint dept01_deptno_pk primary key,
dname varchar2(20) 
);

Insert INTO dept01(deptno,dname)
VALUES(10,'accounting');
select *from dept01;

Insert INTO dept01(deptno,dname)
VALUES(20,'sales');
select *from dept01;

Insert INTO dept01(deptno,dname)
VALUES(30,'research');
select *from dept01;

CREATE TABLE loc01(
locno number(2),
locname varchar2(20),
constraint loc01_locno_pk primary key(locno));

Insert INTO loc01(locno,locname)
VALUES(11,'seoul');
select *from loc01;

Insert INTO loc01(locno,locname)
VALUES(12,'jeju');
select *from loc01;

Insert INTO loc01(locno,locname)
VALUES(13,'busan');
select *from loc01;

CREATE TABLE emp08(
empno number(2) constraint emp08_empno_pk primary key,
deptno number(2) constraint emp08_deptno_fk references dept01(deptno),
locno number(2),
constraint emp08_locno_fk foreign key(locno) references loc01(locno)
);
select *from emp08;

--정상 삽입
INSERT INTO emp08(empno,deptno,locno)
values(1,10,11);
select * from emp08;

INSERT INTO emp08(empno,deptno,locno)
values(2,20,12);
select * from emp08;


INSERT INTO emp08(empno,deptno,locno)
values(3,null,null);
select * from emp08;
--ORA-02291: integrity constraint (HR.EMP08_DEPTNO_FK) violated - parent key not found
INSERT INTO emp08(empno,deptno,locno)
values(4,40,11);
select * from emp08;

ORA-02291: integrity constraint (HR.EMP08_LOCNO_FK) violated - parent key not found
INSERT INTO emp08(empno,deptno,locno)
values(5,30,14);
select * from emp08;

delete from dept01
where deptno=30;
select * from dept01;

--emp08 테이블의  depno컬럼에서 30을 참조하지 않기 때문에 이상없이 삭제가 가능하다.
DELETE FORM dept01
WHERE deptno=30;

SELECT*FROM dept01;

select*from emp08;

delete from  dept01
where deptno=20;

/* 
다른 테이블에서 현재 테이블을 참조해서 사용하고 있는 때는 
제약조건을 제거한 후 현재 테이블의 데이터를 삭제한다.
*/
select *from user_constraints
where constraint_name like '%emp08%';
ALTER TABLE emp08
DROP constraint emp08_deptno_fk;

delete from dept01
where deptno=20;
select*from dept01;

/*
부모키가 삭제가 되면 참조되는 키도 삭제가 되도록 cascade을 설정한다.
*/

--삽입
insert into dept01
values(20,'sales');

--cascade 설정
alter Table emp08
ADD constraint emp08_deptno_fk foreign key(deptno) REFERENCES dept01(deptno) on DELETE CASCADE;

select *from dept01;
select *from emp08;

delete from dept01
where deptno=10;

select *from dept01;
select *from emp08;

/*
 on update cascade은 오라클에서 제공안됨
 해결방법: trigger
*/
CREATE OR REPLACE TRIGGER dept_tri
AFTER UPDATE ON dept01 for each row
BEGIN 
       UPDATE emp08
       SET deptno=50
       WHERE deptno=20;
       END;
update dept01;